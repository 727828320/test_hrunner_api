# NOTE: Generated By HttpRunner v3.1.5
# FROM: testcases\demo_testcase_ref.yml


import sys
from pathlib import Path

sys.path.insert(0, str(Path(__file__).parent.parent))


from httprunner import HttpRunner, Config, Step, RunRequest ,RunTestCase
from testcases.login_testcase import TestCaseLoginTestcaseRef as login
from testcases.user_test.user_create_testcase import TestCaseCreateTestcaseRef as user_create
from testcases.user_test.user_delete_testcase import TestCaseUserTestcaseRef as user_delete
from testcases.label_test.tag_create_testcase import TestCaseTagCreateTestcaseRef as tag_create
from testcases.label_test.tag_delete_testcase import TestCaseTagDeleteTestcaseRef as tag_delete


class TestCaseLabeladduserTestcaseRef(HttpRunner):

    config = (
        Config("request methods testcase: reference testcase")
        .base_url("https://qyapi.weixin.qq.com")
        .verify(False)
        .export("access_token")
    )

    teststeps = [
        Step(
            RunTestCase("获取access_token")
                .call(login)
        ),
        Step(
            RunTestCase("创建用户")
                .call(user_create)
        ),
        Step(
            RunTestCase("创建标签")
                .call(tag_create)
        ),
        Step(
            RunRequest("标签_新增成员")
                .post("/cgi-bin/tag/addtagusers")
                .with_params(**{"access_token": "$access_token"})
                .with_json({
                    "tagid": "${tag_data(tagid)}",
                    "userlist": ["${user_data(userid)}"],
                })
                .validate()
                .assert_equal("status_code", 200)
                .assert_equal("body.errcode", 0)
        ),
        Step(
            RunRequest("标签_获取成员")
                .get("/cgi-bin/tag/get")
                .with_params(**{"access_token": "$access_token","tagid":"${tag_data(tagid)}"})
                .validate()
                .assert_equal("status_code", 200)
                .assert_equal("body.errcode", 0)
        ),
        Step(
            RunRequest("标签_删除成员")
                .post("/cgi-bin/tag/deltagusers")
                .with_params(**{"access_token": "$access_token"})
                .with_json({
                "tagid": "${tag_data(tagid)}",
                "userlist": ["${user_data(userid)}"],
        })
                .validate()
                .assert_equal("status_code", 200)
                .assert_equal("body.errcode", 0)
        ),
        Step(
            RunTestCase("删除标签")
                .call(tag_delete)
        ),
        Step(
            RunTestCase("删除用户")
                .call(user_delete)
        ),
        # Step(
        #     RunRequest("更新标签")
        #         .post("/cgi-bin/tag/update")
        #         .with_params(**{"access_token": "$access_token"})
        #         .with_json("${tag_data(all)}")
        #         .validate()
        #         .assert_equal("status_code", 200)
        #         .assert_equal("body.errcode", 0)
        # ),
        # Step(
        #     RunRequest("读取部门")
        #         .get("/cgi-bin/tag/get")
        #         .with_params(**{"access_token": "$access_token","tagid":"${tag_data(tagid)}"})
        #         .validate()
        #         .assert_equal("status_code", 200)
        #         .assert_equal("body.errcode", 0)
        #         .assert_equal("body.errmsg", "ok")
        # ),
        # Step(
        #     RunRequest("删除标签")
        #     .get("/cgi-bin/tag/delete")
        #     .with_params(**{"access_token": "$access_token", "tagid":"${tag_data(tagid)}"})
        #     .validate()
        #     .assert_equal("status_code", 200)
        #     .assert_equal("body.errcode", 0)
        #     .assert_equal("body.errmsg", "deleted")
        # ),
    ]

if __name__ == "__main__":
    TestCaseLabeladduserTestcaseRef().test_start()
